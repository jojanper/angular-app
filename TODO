Some thoughts for further development:
--------------------------------------

- Component form can be created directly from API data (login, register, etc)
- User register component
  - Reset password
  - Forgot password
- Split routes to home+rest of views?
- Options to alert messages
- Drag+drop demo
- Dialog component
- Generic form component
  - Read only and edit modes, save returns form back to read mode
  - Add select and checkbox input tests
  - Unit test for stateTracker
- Generic table component using DT
  - Row details?
  - Show/hide columns
- Audio player with custom controls
  - flowplayer as basis?
  - Volume knob
- App versioning
  - Indicate availability of new application update to user
- AppVeyor support (https://www.appveyor.com/)?
- Study: Angular5 + Firebase
  - https://firebase.google.com/
  - https://medium.com/codingthesmartway-com-blog/building-an-angular-5-project-with-bootstrap-4-and-firebase-4504ff7717c1
- Spinner action/observable?
  - Hooked to form (to make it non-editable while HTTP request is under progress)
- Mock authentication for dev server?
- Cookie + data
  - If not cookie data available return observable
   - Fetch value and call onNext
   - Examples: https://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/creating_and_subscribing_to_simple_observable_sequences.html
  - Otherwise return Observable.of(data)
- Use GraphQL as mechanism for retrieving data from backend?
- utilize @ngrx/db to persist the collection across sessions
  - At app start, call AppDataLoadAction which feches data from IndexDB, LocalStorage, etc
  - Updates user auth status, for example
- Admin view, permissions
- Socket
  - https://github.com/socketio/socket.io-p2p
